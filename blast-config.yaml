
# -------------------------
#          data
# -------------------------
# The data file to load. Stream directly from a GCS bucket with "gs://{bucket}/{filename}.csv". 
# This may be set with the BLAST_DATA environment variable or the --data flag. 
# -------------------------
data: "data.csv"

# -------------------------
#           log
# ------------------------- 
# The log file to create / append to. This may be set with the BLAST_LOG environment variable or 
# the --log flag.
# -------------------------
log: "out.log"

# -------------------------
#          resume
# -------------------------
# If true, try to load the log file and skip previously successful items (failed items will be 
# retried). This may be set with the BLAST_RESUME environment variable or the --resume flag.
# -------------------------
resume: false

# -------------------------
#           rate
# -------------------------
# Initial rate in items per second. This may be set with the BLAST_RATE environment variable or the 
# --rate flag.
# -------------------------
rate: 5

# -------------------------
#          workers
# -------------------------
# Number of workers. This may be set with the BLAST_WORKERS environment variable or the --workers 
# flag.
# -------------------------
workers: 4

# -------------------------
#       worker-type
# -------------------------
# The selected worker type. Register new worker types with the `RegisterWorkerType` function. This 
# may be set with the BLAST_WORKER_TYPE environment variable or the --worker-type flag.
# -------------------------
worker-type: "dummy"

# -------------------------
#         log-data
# -------------------------
# Array of data fields to include in the output log. This may be set as a json encoded []string 
# with the BLAST_LOG_DATA environment variable or the --log-data flag.")
# -------------------------
log-data:
  - "user_name"
  - "action"

# -------------------------
#        log-output
# -------------------------
# Array of worker response fields to include in the output log. This may be set as a json encoded 
# []string with the BLAST_LOG_OUTPUT environment variable or the --log-output flag.
# -------------------------
log-output:
  - "code"

# -------------------------
#     payload-template
# -------------------------
# This template is rendered and passed to the worker `Send` method. This may be set as a json 
# encoded map[string]interface{} with the BLAST_PAYLOAD_TEMPLATE environment variable or the 
# --payload-template flag.
# -------------------------
payload-template:
  method: "POST"
  path: "/{{user_name}}/{{action}}/{{type}}/"

# -------------------------
#     worker-template
# -------------------------
# If the selected worker type satisfies the `Starter` or `Stopper` interfaces, the worker template 
# will be rendered and passed to the `Start` or `Stop` methods to initialise each worker. Use with 
# `worker-variants` to configure several workers differently to spread load. This may be set as a 
# json encoded map[string]interface{} with the BLAST_WORKER_TEMPLATE environment variable or the 
# --worker-template flag.
# -------------------------
worker-template:
  base: "https://{{region}}.my-api.com"  

# -------------------------
#     payload-variants
# -------------------------
# An array of maps that will cause each item to be repeated with the provided data. This may be set 
# as a json encoded []map[string]string with the BLAST_PAYLOAD_VARIANTS environment variable or the 
# --payload-variants flag. 
# -------------------------
payload-variants:
  - type: "email"
  - type: "phone"

# -------------------------
#     worker-variants
# -------------------------
# An array of maps that will cause each worker to be initialised with different data. This may be 
# set as a json encoded []map[string]string with the BLAST_WORKER_VARIANTS environment variable or 
# the --worker-variants flag. 
# -------------------------
worker-variants:
  - region: "europe-west1"
  - region: "us-east1"